






//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsF5B6EAB7FFB1D56FFC5B06C35C8E9D3EA8B6F212B09FCC8308A5144906527994))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySetsF5B6EAB7FFB1D56FFC5B06C35C8E9D3EA8B6F212B09FCC8308A5144906527994 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySetsF5B6EAB7FFB1D56FFC5B06C35C8E9D3EA8B6F212B09FCC8308A5144906527994()
        {
            this.EdmEntityContainerName = "TomEntities";
            this.StoreEntityContainerName = "TomEntitiesModelStoreContainer";
            this.HashOverMappingClosure = "da8e28d9a62f4686d39f4105ba42918fb511e62384b71ead16a1a30a7b249af3";
            this.HashOverAllExtentViews = "2457111eb05fd3c093286b1a50ec6224c38826d1c045848fa3d0713522b9ff95";
            this.ViewCount = 51;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.catalog
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.catalog", @"
    SELECT VALUE -- Constructing catalog
        [TomEntitiesModel.Store.catalog](T1.catalog_id, T1.catalog_name)
    FROM (
        SELECT 
            T.Id AS catalog_id, 
            T.Name AS catalog_name, 
            True AS _from0
        FROM TomEntities.StockCatalogs AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.company
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.company", @"
    SELECT VALUE -- Constructing company
        [TomEntitiesModel.Store.company](T3.[company.origin_country_id], T3.company_id, T3.company_name, T3.company_symbol, T3.company_comment, T3.[company.business_year], T3.[company.sector_id])
    FROM (
        SELECT T2.[company.origin_country_id], T1.company_id, T1.company_name, T1.company_symbol, T1.company_comment, T1.[company.business_year], CAST(NULL AS [Edm.Int64]) AS [company.sector_id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS company_id, 
                T.Name AS company_name, 
                T.Symbol AS company_symbol, 
                T.Comment AS company_comment, 
                T.RawBusinessYear AS [company.business_year], 
                True AS _from0
            FROM TomEntities.Companies AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Country).Id AS [company.origin_country_id], 
                Key(T.Company).Id AS company_id, 
                True AS _from1
            FROM TomEntities.CompanyCountry AS T) AS T2
            ON T1.company_id = T2.company_id
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.currency
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.currency", @"
    SELECT VALUE -- Constructing currency
        [TomEntitiesModel.Store.currency](T1.currency_id, T1.currency_name, T1.currency_symbol)
    FROM (
        SELECT 
            T.Id AS currency_id, 
            T.Name AS currency_name, 
            T.Symbol AS currency_symbol, 
            True AS _from0
        FROM TomEntities.Currencies AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.datum_origin
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.datum_origin", @"
    SELECT VALUE -- Constructing datum_origin
        [TomEntitiesModel.Store.datum_origin](T1.[datum_origin.id], T1.[datum_origin.name])
    FROM (
        SELECT 
            T.Id AS [datum_origin.id], 
            T.Name AS [datum_origin.name], 
            True AS _from0
        FROM TomEntities.DatumOrigins AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.sector
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.sector", @"
    SELECT VALUE -- Constructing sector
        [TomEntitiesModel.Store.sector](T1.sector_id, T1.sector_name)
    FROM (
        SELECT 
            T.Id AS sector_id, 
            T.Name AS sector_name, 
            True AS _from0
        FROM TomEntities.Sectors AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.stock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.stock", @"
    SELECT VALUE -- Constructing stock
        [TomEntitiesModel.Store.stock](T3.stock_id, T3.stock_isin, T3.stock_type, T3.[stock.company_id])
    FROM (
        SELECT T1.stock_id, T2.stock_isin, T2.stock_type, T1.[stock.company_id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Stock).Id AS stock_id, 
                Key(T.Company).Id AS [stock.company_id], 
                True AS _from1
            FROM TomEntities.StockCompany AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS stock_id, 
                T.Isin AS stock_isin, 
                T.RawType AS stock_type, 
                True AS _from0
            FROM TomEntities.Stocks AS T) AS T2
            ON T1.stock_id = T2.stock_id
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.stock_exchange
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.stock_exchange", @"
    SELECT VALUE -- Constructing stock_exchange
        [TomEntitiesModel.Store.stock_exchange](T3.[stock_exchange.id], T3.[stock_exchange.name], T3.[stock_exchange.symbol], T3.[stock_exchange.currency_id])
    FROM (
        SELECT T1.[stock_exchange.id], T2.[stock_exchange.name], T2.[stock_exchange.symbol], T1.[stock_exchange.currency_id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.StockExchange).Id AS [stock_exchange.id], 
                Key(T.Currency).Id AS [stock_exchange.currency_id], 
                True AS _from1
            FROM TomEntities.StockExchangeCurrency AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS [stock_exchange.id], 
                T.Name AS [stock_exchange.name], 
                T.Symbol AS [stock_exchange.symbol], 
                True AS _from0
            FROM TomEntities.StockExchanges AS T) AS T2
            ON T1.[stock_exchange.id] = T2.[stock_exchange.id]
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.stock_price
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.stock_price", "\r\n    SELECT VALUE -- Constructing stock_price\r\n        [TomEntitiesModel.Store.s" +
                    "tock_price](T4.[stock_price.id], T4.[stock_price.datum_origin_id], T4.[stock_pri" +
                    "ce.timestamp], T4.[stock_price.traded_stock_id], T4.[stock_price.date], T4.[stoc" +
                    "k_price.open], T4.[stock_price.high], T4.[stock_price.low], T4.[stock_price.clos" +
                    "e], T4.[stock_price.volume])\r\n    FROM (\r\n        SELECT T1.[stock_price.id], T1" +
                    ".[stock_price.datum_origin_id], T3.[stock_price.timestamp], T2.[stock_price.trad" +
                    "ed_stock_id], T3.[stock_price.date], T3.[stock_price.open], T3.[stock_price.high" +
                    "], T3.[stock_price.low], T3.[stock_price.close], T3.[stock_price.volume], T3._fr" +
                    "om0, T2._from1, T1._from2\r\n        FROM  (\r\n            SELECT \r\n               " +
                    " Key(T.StockPrice).Id AS [stock_price.id], \r\n                Key(T.DatumOrigin)." +
                    "Id AS [stock_price.datum_origin_id], \r\n                True AS _from2\r\n         " +
                    "   FROM TomEntities.DatumOriginStockPrice AS T) AS T1\r\n            INNER JOIN (\r" +
                    "\n            SELECT \r\n                Key(T.StockPrice).Id AS [stock_price.id], " +
                    "\r\n                Key(T.TradedStock).Id AS [stock_price.traded_stock_id], \r\n    " +
                    "            True AS _from1\r\n            FROM TomEntities.StockPriceTradedStock A" +
                    "S T) AS T2\r\n            ON T1.[stock_price.id] = T2.[stock_price.id]\r\n          " +
                    "  INNER JOIN (\r\n            SELECT \r\n                T.Id AS [stock_price.id], \r" +
                    "\n                T.Timestamp AS [stock_price.timestamp], \r\n                T.Dat" +
                    "eInternal AS [stock_price.date], \r\n                T.Open AS [stock_price.open]," +
                    " \r\n                T.High AS [stock_price.high], \r\n                T.Low AS [sto" +
                    "ck_price.low], \r\n                T.Close AS [stock_price.close], \r\n             " +
                    "   T.Volume AS [stock_price.volume], \r\n                True AS _from0\r\n         " +
                    "   FROM TomEntities.StockPrices AS T) AS T3\r\n            ON T1.[stock_price.id] " +
                    "= T3.[stock_price.id]\r\n    ) AS T4");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.traded_stock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.traded_stock", @"
    SELECT VALUE -- Constructing traded_stock
        [TomEntitiesModel.Store.traded_stock](T4.[traded_stock.id], T4.[traded_stock.wpkn], T4.[traded_stock.symbol], T4.[traded_stock.stock_id], T4.[traded_stock.stock_exchange_id])
    FROM (
        SELECT T1.[traded_stock.id], T3.[traded_stock.wpkn], T3.[traded_stock.symbol], T2.[traded_stock.stock_id], T1.[traded_stock.stock_exchange_id], T3._from0, T2._from1, T1._from2
        FROM  (
            SELECT 
                Key(T.TradedStock).Id AS [traded_stock.id], 
                Key(T.StockExchange).Id AS [traded_stock.stock_exchange_id], 
                True AS _from2
            FROM TomEntities.StockExchangeTradedStock AS T) AS T1
            INNER JOIN (
            SELECT 
                Key(T.TradedStock).Id AS [traded_stock.id], 
                Key(T.Stock).Id AS [traded_stock.stock_id], 
                True AS _from1
            FROM TomEntities.TradedStockStock AS T) AS T2
            ON T1.[traded_stock.id] = T2.[traded_stock.id]
            INNER JOIN (
            SELECT 
                T.Id AS [traded_stock.id], 
                T.Wpkn AS [traded_stock.wpkn], 
                T.Symbol AS [traded_stock.symbol], 
                True AS _from0
            FROM TomEntities.TradedStocks AS T) AS T3
            ON T1.[traded_stock.id] = T3.[traded_stock.id]
    ) AS T4");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.orders", "\r\n    SELECT VALUE -- Constructing orders\r\n        [TomEntitiesModel.Store.orders" +
                    "](T3.orders_id, T3.orders_cost, T3.[orders.indicative_stop], T3.[orders.is_buy]," +
                    " T3.[orders.is_discardable], T3.[orders.is_marged], T3.orders_price, T3.[orders." +
                    "submission_date], T3.orders_quantity, T3.orders_source, T3.[orders.traded_stock_" +
                    "id], T3.orders_type)\r\n    FROM (\r\n        SELECT T1.orders_id, T2.orders_cost, T" +
                    "2.[orders.indicative_stop], T2.[orders.is_buy], T2.[orders.is_discardable], T2.[" +
                    "orders.is_marged], T2.orders_price, T2.[orders.submission_date], T2.orders_quant" +
                    "ity, T2.orders_source, T1.[orders.traded_stock_id], T2.orders_type, T2._from0, T" +
                    "1._from1\r\n        FROM  (\r\n            SELECT \r\n                Key(T.[Order]).I" +
                    "d AS orders_id, \r\n                Key(T.TradedStock).Id AS [orders.traded_stock_" +
                    "id], \r\n                True AS _from1\r\n            FROM TomEntities.OrderTradedS" +
                    "tock AS T) AS T1\r\n            INNER JOIN (\r\n            SELECT \r\n               " +
                    " T.Id AS orders_id, \r\n                T.Cost AS orders_cost, \r\n                T" +
                    ".IndicativeStop AS [orders.indicative_stop], \r\n                T.IsBuy AS [order" +
                    "s.is_buy], \r\n                T.IsDiscardable AS [orders.is_discardable], \r\n     " +
                    "           T.IsMarged AS [orders.is_marged], \r\n                T.Price AS orders" +
                    "_price, \r\n                T.SubmissionDateInternal AS [orders.submission_date], " +
                    "\r\n                T.Quantity AS orders_quantity, \r\n                T.Source AS o" +
                    "rders_source, \r\n                T.TypeInternal AS orders_type, \r\n               " +
                    " True AS _from0\r\n            FROM TomEntities.Orders AS T) AS T2\r\n            ON" +
                    " T1.orders_id = T2.orders_id\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.positions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.positions", "\r\n    SELECT VALUE -- Constructing positions\r\n        [TomEntitiesModel.Store.pos" +
                    "itions](T3.positions_id, T3.positions_quantity, T3.[positions.open_date], T3.[po" +
                    "sitions.open_price], T3.[positions.close_date], T3.[positions.close_price], T3.[" +
                    "positions.is_long], T3.[positions.is_marged], T3.[positions.stop_price], T3.posi" +
                    "tions_source, T3.[positions.intended_to_close], T3.[positions.traded_stock_id])\r" +
                    "\n    FROM (\r\n        SELECT T1.positions_id, T2.positions_quantity, T2.[position" +
                    "s.open_date], T2.[positions.open_price], T2.[positions.close_date], T2.[position" +
                    "s.close_price], T2.[positions.is_long], T2.[positions.is_marged], T2.[positions." +
                    "stop_price], T2.positions_source, T2.[positions.intended_to_close], T1.[position" +
                    "s.traded_stock_id], T2._from0, T1._from1\r\n        FROM  (\r\n            SELECT \r\n" +
                    "                Key(T.Position).Id AS positions_id, \r\n                Key(T.Trad" +
                    "edStock).Id AS [positions.traded_stock_id], \r\n                True AS _from1\r\n  " +
                    "          FROM TomEntities.PositionTradedStock AS T) AS T1\r\n            INNER JO" +
                    "IN (\r\n            SELECT \r\n                T.Id AS positions_id, \r\n             " +
                    "   T.Quantity AS positions_quantity, \r\n                T.OpenDateInternal AS [po" +
                    "sitions.open_date], \r\n                T.OpenPrice AS [positions.open_price], \r\n " +
                    "               T.CloseDateInternal AS [positions.close_date], \r\n                " +
                    "T.ClosePrice AS [positions.close_price], \r\n                T.IsLong AS [position" +
                    "s.is_long], \r\n                T.IsMarged AS [positions.is_marged], \r\n           " +
                    "     T.StopPrice AS [positions.stop_price], \r\n                T.Source AS positi" +
                    "ons_source, \r\n                T.IntendedToClose AS [positions.intended_to_close]" +
                    ", \r\n                True AS _from0\r\n            FROM TomEntities.Positions AS T)" +
                    " AS T2\r\n            ON T1.positions_id = T2.positions_id\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.countries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.countries", @"
    SELECT VALUE -- Constructing countries
        [TomEntitiesModel.Store.countries](T1.countries_id, T1.countries_lcid)
    FROM (
        SELECT 
            T.Id AS countries_id, 
            T.LCID AS countries_lcid, 
            True AS _from0
        FROM TomEntities.Countries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.country_aliases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.country_aliases", @"
    SELECT VALUE -- Constructing country_aliases
        [TomEntitiesModel.Store.country_aliases](T3.[country_aliases.id], T3.[country_aliases.country_id], T3.[country_aliases.alias])
    FROM (
        SELECT T1.[country_aliases.id], T1.[country_aliases.country_id], T2.[country_aliases.alias], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.CountryAlias).Id AS [country_aliases.id], 
                Key(T.Country).Id AS [country_aliases.country_id], 
                True AS _from1
            FROM TomEntities.CountryCountryAlias AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS [country_aliases.id], 
                T.Name AS [country_aliases.alias], 
                True AS _from0
            FROM TomEntities.CountryAliases AS T) AS T2
            ON T1.[country_aliases.id] = T2.[country_aliases.id]
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.sector_aliases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.sector_aliases", @"
    SELECT VALUE -- Constructing sector_aliases
        [TomEntitiesModel.Store.sector_aliases](T3.[sector_aliases.id], T3.[sector_aliases.sector_id], T3.[sector_aliases.alias])
    FROM (
        SELECT T1.[sector_aliases.id], T1.[sector_aliases.sector_id], T2.[sector_aliases.alias], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.SectorAlias).Id AS [sector_aliases.id], 
                Key(T.Sector).Id AS [sector_aliases.sector_id], 
                True AS _from1
            FROM TomEntities.SectorSectorAlias AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS [sector_aliases.id], 
                T.Name AS [sector_aliases.alias], 
                True AS _from0
            FROM TomEntities.SectorAliases AS T) AS T2
            ON T1.[sector_aliases.id] = T2.[sector_aliases.id]
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.catalog_contents
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.catalog_contents", @"
    SELECT VALUE -- Constructing catalog_contents
        [TomEntitiesModel.Store.catalog_contents](T1.[catalog_contents.catalog_id], T1.[catalog_contents.traded_stock_id])
    FROM (
        SELECT 
            Key(T.Catalog).Id AS [catalog_contents.catalog_id], 
            Key(T.TradedStock).Id AS [catalog_contents.traded_stock_id], 
            True AS _from0
        FROM TomEntities.CatalogTradedStock AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.position_pending_orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.position_pending_orders", @"
    SELECT VALUE -- Constructing position_pending_orders
        [TomEntitiesModel.Store.position_pending_orders](T1.[position_pending_orders.position_id], T1.[position_pending_orders.order_id])
    FROM (
        SELECT 
            Key(T.Positions).Id AS [position_pending_orders.position_id], 
            Key(T.Orders).Id AS [position_pending_orders.order_id], 
            True AS _from0
        FROM TomEntities.PendingOrders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.position_executed_orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.position_executed_orders", @"
    SELECT VALUE -- Constructing position_executed_orders
        [TomEntitiesModel.Store.position_executed_orders](T1.[position_executed_orders.position_id], T1.[position_executed_orders.order_id])
    FROM (
        SELECT 
            Key(T.Position).Id AS [position_executed_orders.position_id], 
            Key(T.[Order]).Id AS [position_executed_orders.order_id], 
            True AS _from0
        FROM TomEntities.ExecutedOrder AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.company_sectors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.company_sectors", @"
    SELECT VALUE -- Constructing company_sectors
        [TomEntitiesModel.Store.company_sectors](T1.[company_sectors.company_id], T1.[company_sectors.sector_id])
    FROM (
        SELECT 
            Key(T.Company).Id AS [company_sectors.company_id], 
            Key(T.Sector).Id AS [company_sectors.sector_id], 
            True AS _from0
        FROM TomEntities.CompanySector AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.StockCatalogs
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.StockCatalogs", @"
    SELECT VALUE -- Constructing StockCatalogs
        [TomEntitiesModel.StockCatalog](T1.StockCatalog_Id, T1.StockCatalog_Name)
    FROM (
        SELECT 
            T.id AS StockCatalog_Id, 
            T.name AS StockCatalog_Name, 
            True AS _from0
        FROM TomEntitiesModelStoreContainer.catalog AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Companies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Companies", @"
    SELECT VALUE -- Constructing Companies
        [TomEntitiesModel.Company](T1.Company_Id, T1.Company_Name, T1.Company_Symbol, T1.Company_Comment, T1.Company_RawBusinessYear) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.Countries, ROW(T1.CompanyCountry_Country_Id),[TomEntitiesModel.Country]),[TomEntitiesModel.CompanyCountry],Company,Country) 
    FROM (
        SELECT 
            T.id AS Company_Id, 
            T.name AS Company_Name, 
            T.symbol AS Company_Symbol, 
            T.comment AS Company_Comment, 
            T.business_year AS Company_RawBusinessYear, 
            True AS _from0, 
            T.origin_country_id AS CompanyCountry_Country_Id
        FROM TomEntitiesModelStoreContainer.company AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Currencies
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Currencies", @"
    SELECT VALUE -- Constructing Currencies
        [TomEntitiesModel.Currency](T1.Currency_Id, T1.Currency_Name, T1.Currency_Symbol)
    FROM (
        SELECT 
            T.id AS Currency_Id, 
            T.name AS Currency_Name, 
            T.symbol AS Currency_Symbol, 
            True AS _from0
        FROM TomEntitiesModelStoreContainer.currency AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.DatumOrigins
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.DatumOrigins", @"
    SELECT VALUE -- Constructing DatumOrigins
        [TomEntitiesModel.DatumOrigin](T1.DatumOrigin_Id, T1.DatumOrigin_Name)
    FROM (
        SELECT 
            T.id AS DatumOrigin_Id, 
            T.name AS DatumOrigin_Name, 
            True AS _from0
        FROM TomEntitiesModelStoreContainer.datum_origin AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Sectors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Sectors", @"
    SELECT VALUE -- Constructing Sectors
        [TomEntitiesModel.Sector](T1.Sector_Id, T1.Sector_Name)
    FROM (
        SELECT 
            T.id AS Sector_Id, 
            T.name AS Sector_Name, 
            True AS _from0
        FROM TomEntitiesModelStoreContainer.sector AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Stocks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Stocks", @"
    SELECT VALUE -- Constructing Stocks
        [TomEntitiesModel.Stock](T1.Stock_Id, T1.Stock_Isin, T1.Stock_RawType) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.Companies, ROW(T1.StockCompany_Company_Id),[TomEntitiesModel.Company]),[TomEntitiesModel.StockCompany],Stock,Company) 
    FROM (
        SELECT 
            T.id AS Stock_Id, 
            T.isin AS Stock_Isin, 
            T.type AS Stock_RawType, 
            True AS _from0, 
            T.company_id AS StockCompany_Company_Id
        FROM TomEntitiesModelStoreContainer.stock AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.StockExchanges
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.StockExchanges", @"
    SELECT VALUE -- Constructing StockExchanges
        [TomEntitiesModel.StockExchange](T1.StockExchange_Id, T1.StockExchange_Name, T1.StockExchange_Symbol) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.Currencies, ROW(T1.StockExchangeCurrency_Currency_Id),[TomEntitiesModel.Currency]),[TomEntitiesModel.StockExchangeCurrency],StockExchange,Currency) 
    FROM (
        SELECT 
            T.id AS StockExchange_Id, 
            T.name AS StockExchange_Name, 
            T.symbol AS StockExchange_Symbol, 
            True AS _from0, 
            T.currency_id AS StockExchangeCurrency_Currency_Id
        FROM TomEntitiesModelStoreContainer.stock_exchange AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.StockPrices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.StockPrices", @"
    SELECT VALUE -- Constructing StockPrices
        [TomEntitiesModel.StockPrice](T1.StockPrice_Id, T1.StockPrice_Timestamp, T1.StockPrice_DateInternal, T1.StockPrice_Open, T1.StockPrice_High, T1.StockPrice_Low, T1.StockPrice_Close, T1.StockPrice_Volume) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.TradedStocks, ROW(T1.StockPriceTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]),[TomEntitiesModel.StockPriceTradedStock],StockPrice,TradedStock) 
        RELATIONSHIP(CREATEREF(TomEntities.DatumOrigins, ROW(T1.DatumOriginStockPrice_DatumOrigin_Id),[TomEntitiesModel.DatumOrigin]),[TomEntitiesModel.DatumOriginStockPrice],StockPrice,DatumOrigin) 
    FROM (
        SELECT 
            T.id AS StockPrice_Id, 
            T.timestamp AS StockPrice_Timestamp, 
            T.date AS StockPrice_DateInternal, 
            T.open AS StockPrice_Open, 
            T.high AS StockPrice_High, 
            T.low AS StockPrice_Low, 
            T.close AS StockPrice_Close, 
            T.volume AS StockPrice_Volume, 
            True AS _from0, 
            T.traded_stock_id AS StockPriceTradedStock_TradedStock_Id, 
            T.datum_origin_id AS DatumOriginStockPrice_DatumOrigin_Id
        FROM TomEntitiesModelStoreContainer.stock_price AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.TradedStocks
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.TradedStocks", @"
    SELECT VALUE -- Constructing TradedStocks
        [TomEntitiesModel.TradedStock](T1.TradedStock_Id, T1.TradedStock_Wpkn, T1.TradedStock_Symbol) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.Stocks, ROW(T1.TradedStockStock_Stock_Id),[TomEntitiesModel.Stock]),[TomEntitiesModel.TradedStockStock],TradedStock,Stock) 
        RELATIONSHIP(CREATEREF(TomEntities.StockExchanges, ROW(T1.StockExchangeTradedStock_StockExchange_Id),[TomEntitiesModel.StockExchange]),[TomEntitiesModel.StockExchangeTradedStock],TradedStock,StockExchange) 
    FROM (
        SELECT 
            T.id AS TradedStock_Id, 
            T.wpkn AS TradedStock_Wpkn, 
            T.symbol AS TradedStock_Symbol, 
            True AS _from0, 
            T.stock_id AS TradedStockStock_Stock_Id, 
            T.stock_exchange_id AS StockExchangeTradedStock_StockExchange_Id
        FROM TomEntitiesModelStoreContainer.traded_stock AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Orders", @"
    SELECT VALUE -- Constructing Orders
        [TomEntitiesModel.Order](T1.Order_Id, T1.Order_Cost, T1.Order_IndicativeStop, T1.Order_IsBuy, T1.Order_IsDiscardable, T1.Order_IsMarged, T1.Order_Price, T1.Order_SubmissionDateInternal, T1.Order_Quantity, T1.Order_Source, T1.Order_TypeInternal) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.TradedStocks, ROW(T1.OrderTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]),[TomEntitiesModel.OrderTradedStock],[Order],TradedStock) 
    FROM (
        SELECT 
            T.id AS Order_Id, 
            T.cost AS Order_Cost, 
            T.indicative_stop AS Order_IndicativeStop, 
            T.is_buy AS Order_IsBuy, 
            T.is_discardable AS Order_IsDiscardable, 
            T.is_marged AS Order_IsMarged, 
            T.price AS Order_Price, 
            T.submission_date AS Order_SubmissionDateInternal, 
            T.quantity AS Order_Quantity, 
            T.source AS Order_Source, 
            T.type AS Order_TypeInternal, 
            True AS _from0, 
            T.traded_stock_id AS OrderTradedStock_TradedStock_Id
        FROM TomEntitiesModelStoreContainer.orders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Positions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Positions", @"
    SELECT VALUE -- Constructing Positions
        [TomEntitiesModel.Position](T1.Position_Id, T1.Position_Quantity, T1.Position_OpenDateInternal, T1.Position_OpenPrice, T1.Position_CloseDateInternal, T1.Position_ClosePrice, T1.Position_IsLong, T1.Position_IsMarged, T1.Position_StopPrice, T1.Position_Source, T1.Position_IntendedToClose) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.TradedStocks, ROW(T1.PositionTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]),[TomEntitiesModel.PositionTradedStock],Position,TradedStock) 
    FROM (
        SELECT 
            T.id AS Position_Id, 
            T.quantity AS Position_Quantity, 
            T.open_date AS Position_OpenDateInternal, 
            T.open_price AS Position_OpenPrice, 
            T.close_date AS Position_CloseDateInternal, 
            T.close_price AS Position_ClosePrice, 
            T.is_long AS Position_IsLong, 
            T.is_marged AS Position_IsMarged, 
            T.stop_price AS Position_StopPrice, 
            T.source AS Position_Source, 
            T.intended_to_close AS Position_IntendedToClose, 
            True AS _from0, 
            T.traded_stock_id AS PositionTradedStock_TradedStock_Id
        FROM TomEntitiesModelStoreContainer.positions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Countries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Countries", @"
    SELECT VALUE -- Constructing Countries
        [TomEntitiesModel.Country](T1.Country_Id, T1.Country_LCID)
    FROM (
        SELECT 
            T.id AS Country_Id, 
            T.lcid AS Country_LCID, 
            True AS _from0
        FROM TomEntitiesModelStoreContainer.countries AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.CountryAliases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.CountryAliases", @"
    SELECT VALUE -- Constructing CountryAliases
        [TomEntitiesModel.CountryAlias](T1.CountryAlias_Id, T1.CountryAlias_Name) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.Countries, ROW(T1.CountryCountryAlias_Country_Id),[TomEntitiesModel.Country]),[TomEntitiesModel.CountryCountryAlias],CountryAlias,Country) 
    FROM (
        SELECT 
            T.id AS CountryAlias_Id, 
            T.alias AS CountryAlias_Name, 
            True AS _from0, 
            T.country_id AS CountryCountryAlias_Country_Id
        FROM TomEntitiesModelStoreContainer.country_aliases AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.SectorAliases
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.SectorAliases", @"
    SELECT VALUE -- Constructing SectorAliases
        [TomEntitiesModel.SectorAlias](T1.SectorAlias_Id, T1.SectorAlias_Name) WITH 
        RELATIONSHIP(CREATEREF(TomEntities.Sectors, ROW(T1.SectorSectorAlias_Sector_Id),[TomEntitiesModel.Sector]),[TomEntitiesModel.SectorSectorAlias],SectorAlias,Sector) 
    FROM (
        SELECT 
            T.id AS SectorAlias_Id, 
            T.alias AS SectorAlias_Name, 
            True AS _from0, 
            T.sector_id AS SectorSectorAlias_Sector_Id
        FROM TomEntitiesModelStoreContainer.sector_aliases AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.StockCompany
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.StockCompany", @"
    SELECT VALUE -- Constructing StockCompany
        [TomEntitiesModel.StockCompany](T3.StockCompany_Stock, T3.StockCompany_Company)
    FROM (
        SELECT -- Constructing Stock
            CreateRef(TomEntities.Stocks, row(T2.StockCompany_Stock_Id),[TomEntitiesModel.Stock]) AS StockCompany_Stock, 
            T2.StockCompany_Company
        FROM (
            SELECT -- Constructing Company
                CreateRef(TomEntities.Companies, row(T1.StockCompany_Company_Id),[TomEntitiesModel.Company]) AS StockCompany_Company, 
                T1.StockCompany_Stock_Id
            FROM (
                SELECT 
                    T.id AS StockCompany_Stock_Id, 
                    T.company_id AS StockCompany_Company_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.stock AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.TradedStockStock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.TradedStockStock", @"
    SELECT VALUE -- Constructing TradedStockStock
        [TomEntitiesModel.TradedStockStock](T3.TradedStockStock_TradedStock, T3.TradedStockStock_Stock)
    FROM (
        SELECT -- Constructing TradedStock
            CreateRef(TomEntities.TradedStocks, row(T2.TradedStockStock_TradedStock_Id),[TomEntitiesModel.TradedStock]) AS TradedStockStock_TradedStock, 
            T2.TradedStockStock_Stock
        FROM (
            SELECT -- Constructing Stock
                CreateRef(TomEntities.Stocks, row(T1.TradedStockStock_Stock_Id),[TomEntitiesModel.Stock]) AS TradedStockStock_Stock, 
                T1.TradedStockStock_TradedStock_Id
            FROM (
                SELECT 
                    T.id AS TradedStockStock_TradedStock_Id, 
                    T.stock_id AS TradedStockStock_Stock_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.traded_stock AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.StockExchangeCurrency
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.StockExchangeCurrency", @"
    SELECT VALUE -- Constructing StockExchangeCurrency
        [TomEntitiesModel.StockExchangeCurrency](T3.StockExchangeCurrency_StockExchange, T3.StockExchangeCurrency_Currency)
    FROM (
        SELECT -- Constructing StockExchange
            CreateRef(TomEntities.StockExchanges, row(T2.StockExchangeCurrency_StockExchange_Id),[TomEntitiesModel.StockExchange]) AS StockExchangeCurrency_StockExchange, 
            T2.StockExchangeCurrency_Currency
        FROM (
            SELECT -- Constructing Currency
                CreateRef(TomEntities.Currencies, row(T1.StockExchangeCurrency_Currency_Id),[TomEntitiesModel.Currency]) AS StockExchangeCurrency_Currency, 
                T1.StockExchangeCurrency_StockExchange_Id
            FROM (
                SELECT 
                    T.id AS StockExchangeCurrency_StockExchange_Id, 
                    T.currency_id AS StockExchangeCurrency_Currency_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.stock_exchange AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.StockPriceTradedStock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.StockPriceTradedStock", @"
    SELECT VALUE -- Constructing StockPriceTradedStock
        [TomEntitiesModel.StockPriceTradedStock](T3.StockPriceTradedStock_StockPrice, T3.StockPriceTradedStock_TradedStock)
    FROM (
        SELECT -- Constructing StockPrice
            CreateRef(TomEntities.StockPrices, row(T2.StockPriceTradedStock_StockPrice_Id),[TomEntitiesModel.StockPrice]) AS StockPriceTradedStock_StockPrice, 
            T2.StockPriceTradedStock_TradedStock
        FROM (
            SELECT -- Constructing TradedStock
                CreateRef(TomEntities.TradedStocks, row(T1.StockPriceTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]) AS StockPriceTradedStock_TradedStock, 
                T1.StockPriceTradedStock_StockPrice_Id
            FROM (
                SELECT 
                    T.id AS StockPriceTradedStock_StockPrice_Id, 
                    T.traded_stock_id AS StockPriceTradedStock_TradedStock_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.stock_price AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.StockExchangeTradedStock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.StockExchangeTradedStock", @"
    SELECT VALUE -- Constructing StockExchangeTradedStock
        [TomEntitiesModel.StockExchangeTradedStock](T3.StockExchangeTradedStock_StockExchange, T3.StockExchangeTradedStock_TradedStock)
    FROM (
        SELECT -- Constructing StockExchange
            CreateRef(TomEntities.StockExchanges, row(T2.StockExchangeTradedStock_StockExchange_Id),[TomEntitiesModel.StockExchange]) AS StockExchangeTradedStock_StockExchange, 
            T2.StockExchangeTradedStock_TradedStock
        FROM (
            SELECT -- Constructing TradedStock
                CreateRef(TomEntities.TradedStocks, row(T1.StockExchangeTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]) AS StockExchangeTradedStock_TradedStock, 
                T1.StockExchangeTradedStock_StockExchange_Id
            FROM (
                SELECT 
                    T.stock_exchange_id AS StockExchangeTradedStock_StockExchange_Id, 
                    T.id AS StockExchangeTradedStock_TradedStock_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.traded_stock AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.DatumOriginStockPrice
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.DatumOriginStockPrice", @"
    SELECT VALUE -- Constructing DatumOriginStockPrice
        [TomEntitiesModel.DatumOriginStockPrice](T3.DatumOriginStockPrice_DatumOrigin, T3.DatumOriginStockPrice_StockPrice)
    FROM (
        SELECT -- Constructing DatumOrigin
            CreateRef(TomEntities.DatumOrigins, row(T2.DatumOriginStockPrice_DatumOrigin_Id),[TomEntitiesModel.DatumOrigin]) AS DatumOriginStockPrice_DatumOrigin, 
            T2.DatumOriginStockPrice_StockPrice
        FROM (
            SELECT -- Constructing StockPrice
                CreateRef(TomEntities.StockPrices, row(T1.DatumOriginStockPrice_StockPrice_Id),[TomEntitiesModel.StockPrice]) AS DatumOriginStockPrice_StockPrice, 
                T1.DatumOriginStockPrice_DatumOrigin_Id
            FROM (
                SELECT 
                    T.datum_origin_id AS DatumOriginStockPrice_DatumOrigin_Id, 
                    T.id AS DatumOriginStockPrice_StockPrice_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.stock_price AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.CatalogTradedStock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.CatalogTradedStock", @"
    SELECT VALUE -- Constructing CatalogTradedStock
        [TomEntitiesModel.CatalogTradedStock](T3.CatalogTradedStock_Catalog, T3.CatalogTradedStock_TradedStock)
    FROM (
        SELECT -- Constructing Catalog
            CreateRef(TomEntities.StockCatalogs, row(T2.CatalogTradedStock_Catalog_Id),[TomEntitiesModel.StockCatalog]) AS CatalogTradedStock_Catalog, 
            T2.CatalogTradedStock_TradedStock
        FROM (
            SELECT -- Constructing TradedStock
                CreateRef(TomEntities.TradedStocks, row(T1.CatalogTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]) AS CatalogTradedStock_TradedStock, 
                T1.CatalogTradedStock_Catalog_Id
            FROM (
                SELECT 
                    T.catalog_id AS CatalogTradedStock_Catalog_Id, 
                    T.traded_stock_id AS CatalogTradedStock_TradedStock_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.catalog_contents AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.PendingOrders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.PendingOrders", @"
    SELECT VALUE -- Constructing PendingOrders
        [TomEntitiesModel.PendingOrders](T3.PendingOrders_Positions, T3.PendingOrders_Orders)
    FROM (
        SELECT -- Constructing Positions
            CreateRef(TomEntities.Positions, row(T2.PendingOrders_Positions_Id),[TomEntitiesModel.Position]) AS PendingOrders_Positions, 
            T2.PendingOrders_Orders
        FROM (
            SELECT -- Constructing Orders
                CreateRef(TomEntities.Orders, row(T1.PendingOrders_Orders_Id),[TomEntitiesModel.Order]) AS PendingOrders_Orders, 
                T1.PendingOrders_Positions_Id
            FROM (
                SELECT 
                    T.position_id AS PendingOrders_Positions_Id, 
                    T.order_id AS PendingOrders_Orders_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.position_pending_orders AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.OrderTradedStock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.OrderTradedStock", @"
    SELECT VALUE -- Constructing OrderTradedStock
        [TomEntitiesModel.OrderTradedStock](T3.OrderTradedStock_Order, T3.OrderTradedStock_TradedStock)
    FROM (
        SELECT -- Constructing Order
            CreateRef(TomEntities.Orders, row(T2.OrderTradedStock_Order_Id),[TomEntitiesModel.Order]) AS OrderTradedStock_Order, 
            T2.OrderTradedStock_TradedStock
        FROM (
            SELECT -- Constructing TradedStock
                CreateRef(TomEntities.TradedStocks, row(T1.OrderTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]) AS OrderTradedStock_TradedStock, 
                T1.OrderTradedStock_Order_Id
            FROM (
                SELECT 
                    T.id AS OrderTradedStock_Order_Id, 
                    T.traded_stock_id AS OrderTradedStock_TradedStock_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.orders AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.ExecutedOrder
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.ExecutedOrder", @"
    SELECT VALUE -- Constructing ExecutedOrder
        [TomEntitiesModel.ExecutedOrder](T3.ExecutedOrder_Position, T3.ExecutedOrder_Order)
    FROM (
        SELECT -- Constructing Position
            CreateRef(TomEntities.Positions, row(T2.ExecutedOrder_Position_Id),[TomEntitiesModel.Position]) AS ExecutedOrder_Position, 
            T2.ExecutedOrder_Order
        FROM (
            SELECT -- Constructing Order
                CreateRef(TomEntities.Orders, row(T1.ExecutedOrder_Order_Id),[TomEntitiesModel.Order]) AS ExecutedOrder_Order, 
                T1.ExecutedOrder_Position_Id
            FROM (
                SELECT 
                    T.position_id AS ExecutedOrder_Position_Id, 
                    T.order_id AS ExecutedOrder_Order_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.position_executed_orders AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.PositionTradedStock
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.PositionTradedStock", @"
    SELECT VALUE -- Constructing PositionTradedStock
        [TomEntitiesModel.PositionTradedStock](T3.PositionTradedStock_Position, T3.PositionTradedStock_TradedStock)
    FROM (
        SELECT -- Constructing Position
            CreateRef(TomEntities.Positions, row(T2.PositionTradedStock_Position_Id),[TomEntitiesModel.Position]) AS PositionTradedStock_Position, 
            T2.PositionTradedStock_TradedStock
        FROM (
            SELECT -- Constructing TradedStock
                CreateRef(TomEntities.TradedStocks, row(T1.PositionTradedStock_TradedStock_Id),[TomEntitiesModel.TradedStock]) AS PositionTradedStock_TradedStock, 
                T1.PositionTradedStock_Position_Id
            FROM (
                SELECT 
                    T.id AS PositionTradedStock_Position_Id, 
                    T.traded_stock_id AS PositionTradedStock_TradedStock_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.positions AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.CompanyCountry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.CompanyCountry", @"
    SELECT VALUE -- Constructing CompanyCountry
        [TomEntitiesModel.CompanyCountry](T3.CompanyCountry_Company, T3.CompanyCountry_Country)
    FROM (
        SELECT -- Constructing Company
            CreateRef(TomEntities.Companies, row(T2.CompanyCountry_Company_Id),[TomEntitiesModel.Company]) AS CompanyCountry_Company, 
            T2.CompanyCountry_Country
        FROM (
            SELECT -- Constructing Country
                CreateRef(TomEntities.Countries, row(T1.CompanyCountry_Country_Id),[TomEntitiesModel.Country]) AS CompanyCountry_Country, 
                T1.CompanyCountry_Company_Id
            FROM (
                SELECT 
                    T.id AS CompanyCountry_Company_Id, 
                    T.origin_country_id AS CompanyCountry_Country_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.company AS T
                WHERE T.origin_country_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.CountryCountryAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.CountryCountryAlias", @"
    SELECT VALUE -- Constructing CountryCountryAlias
        [TomEntitiesModel.CountryCountryAlias](T3.CountryCountryAlias_Country, T3.CountryCountryAlias_CountryAlias)
    FROM (
        SELECT -- Constructing Country
            CreateRef(TomEntities.Countries, row(T2.CountryCountryAlias_Country_Id),[TomEntitiesModel.Country]) AS CountryCountryAlias_Country, 
            T2.CountryCountryAlias_CountryAlias
        FROM (
            SELECT -- Constructing CountryAlias
                CreateRef(TomEntities.CountryAliases, row(T1.CountryCountryAlias_CountryAlias_Id),[TomEntitiesModel.CountryAlias]) AS CountryCountryAlias_CountryAlias, 
                T1.CountryCountryAlias_Country_Id
            FROM (
                SELECT 
                    T.country_id AS CountryCountryAlias_Country_Id, 
                    T.id AS CountryCountryAlias_CountryAlias_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.country_aliases AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.CompanySector
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.CompanySector", @"
    SELECT VALUE -- Constructing CompanySector
        [TomEntitiesModel.CompanySector](T3.CompanySector_Company, T3.CompanySector_Sector)
    FROM (
        SELECT -- Constructing Company
            CreateRef(TomEntities.Companies, row(T2.CompanySector_Company_Id),[TomEntitiesModel.Company]) AS CompanySector_Company, 
            T2.CompanySector_Sector
        FROM (
            SELECT -- Constructing Sector
                CreateRef(TomEntities.Sectors, row(T1.CompanySector_Sector_Id),[TomEntitiesModel.Sector]) AS CompanySector_Sector, 
                T1.CompanySector_Company_Id
            FROM (
                SELECT 
                    T.company_id AS CompanySector_Company_Id, 
                    T.sector_id AS CompanySector_Sector_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.company_sectors AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntities.SectorSectorAlias
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.SectorSectorAlias", @"
    SELECT VALUE -- Constructing SectorSectorAlias
        [TomEntitiesModel.SectorSectorAlias](T3.SectorSectorAlias_Sector, T3.SectorSectorAlias_SectorAlias)
    FROM (
        SELECT -- Constructing Sector
            CreateRef(TomEntities.Sectors, row(T2.SectorSectorAlias_Sector_Id),[TomEntitiesModel.Sector]) AS SectorSectorAlias_Sector, 
            T2.SectorSectorAlias_SectorAlias
        FROM (
            SELECT -- Constructing SectorAlias
                CreateRef(TomEntities.SectorAliases, row(T1.SectorSectorAlias_SectorAlias_Id),[TomEntitiesModel.SectorAlias]) AS SectorSectorAlias_SectorAlias, 
                T1.SectorSectorAlias_Sector_Id
            FROM (
                SELECT 
                    T.sector_id AS SectorSectorAlias_Sector_Id, 
                    T.id AS SectorSectorAlias_SectorAlias_Id, 
                    True AS _from0
                FROM TomEntitiesModelStoreContainer.sector_aliases AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.db_metadata
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.db_metadata", @"
    SELECT VALUE -- Constructing db_metadata
        [TomEntitiesModel.Store.db_metadata](T1.[db_metadata.key], T1.[db_metadata.value])
    FROM (
        SELECT 
            T.[Key] AS [db_metadata.key], 
            T.[Value] AS [db_metadata.value], 
            True AS _from0
        FROM TomEntities.MetadataSet AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.MetadataSet
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.MetadataSet", @"
    SELECT VALUE -- Constructing MetadataSet
        [TomEntitiesModel.Metadata](T1.Metadata_Key, T1.Metadata_Value)
    FROM (
        SELECT 
            T.[key] AS Metadata_Key, 
            T.[value] AS Metadata_Value, 
            True AS _from0
        FROM TomEntitiesModelStoreContainer.db_metadata AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntitiesModelStoreContainer.portfolios
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntitiesModelStoreContainer.portfolios", @"
    SELECT VALUE -- Constructing portfolios
        [TomEntitiesModel.Store.portfolios](T1.portfolios_id, T1.portfolios_broker, T1.portfolios_cash, T1.[portfolios.initial_sum])
    FROM (
        SELECT 
            T.Id AS portfolios_id, 
            T.BrokerInternal AS portfolios_broker, 
            T.Cash AS portfolios_cash, 
            T.InitialSum AS [portfolios.initial_sum], 
            True AS _from0
        FROM TomEntities.Portfolios AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for TomEntities.Portfolios
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("TomEntities.Portfolios", @"
    SELECT VALUE -- Constructing Portfolios
        [TomEntitiesModel.Portfolio](T1.Portfolio_Id, T1.Portfolio_BrokerInternal, T1.Portfolio_Cash, T1.Portfolio_InitialSum)
    FROM (
        SELECT 
            T.id AS Portfolio_Id, 
            T.broker AS Portfolio_BrokerInternal, 
            T.cash AS Portfolio_Cash, 
            T.initial_sum AS Portfolio_InitialSum, 
            True AS _from0
        FROM TomEntitiesModelStoreContainer.portfolios AS T
    ) AS T1");
        }
    }
}


