//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("TomEntitiesModel", "StockCompany", "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Stock), "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.Company))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "TradedStockStock", "TradedStock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.TradedStock), "Stock", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.Stock))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "StockExchangeCurrency", "StockExchange", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.StockExchange), "Currency", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.Currency))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "StockPriceTradedStock", "StockPrice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.StockPrice), "TradedStock", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.TradedStock))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "StockExchangeTradedStock", "StockExchange", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.StockExchange), "TradedStock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.TradedStock))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "DatumOriginStockPrice", "DatumOrigin", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.DatumOrigin), "StockPrice", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.StockPrice))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "CatalogTradedStock", "Catalog", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.StockCatalog), "TradedStock", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.TradedStock))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "PendingOrders", "Positions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Position), "Orders", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Order))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "OrderTradedStock", "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Order), "TradedStock", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.TradedStock))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "ExecutedOrder", "Position", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Position), "Order", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Order))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "PositionTradedStock", "Position", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Position), "TradedStock", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.TradedStock))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "CompanyCountry", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Company), "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Maui.Entities.Country))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "CountryCountryAlias", "Country", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.Country), "CountryAlias", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.CountryAlias))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "CompanySector", "Company", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Company), "Sector", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.Sector))]
[assembly: EdmRelationshipAttribute("TomEntitiesModel", "SectorSectorAlias", "Sector", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Maui.Entities.Sector), "SectorAlias", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Maui.Entities.SectorAlias))]

#endregion

namespace Maui.Entities
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    internal partial class TomEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TomEntities object using the connection string found in the 'TomEntities' section of the application configuration file.
        /// </summary>
        public TomEntities() : base("name=TomEntities", "TomEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TomEntities object.
        /// </summary>
        public TomEntities(string connectionString) : base(connectionString, "TomEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TomEntities object.
        /// </summary>
        public TomEntities(EntityConnection connection) : base(connection, "TomEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StockCatalog> StockCatalogs
        {
            get
            {
                if ((_StockCatalogs == null))
                {
                    _StockCatalogs = base.CreateObjectSet<StockCatalog>("StockCatalogs");
                }
                return _StockCatalogs;
            }
        }
        private ObjectSet<StockCatalog> _StockCatalogs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Company> Companies
        {
            get
            {
                if ((_Companies == null))
                {
                    _Companies = base.CreateObjectSet<Company>("Companies");
                }
                return _Companies;
            }
        }
        private ObjectSet<Company> _Companies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Currency> Currencies
        {
            get
            {
                if ((_Currencies == null))
                {
                    _Currencies = base.CreateObjectSet<Currency>("Currencies");
                }
                return _Currencies;
            }
        }
        private ObjectSet<Currency> _Currencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DatumOrigin> DatumOrigins
        {
            get
            {
                if ((_DatumOrigins == null))
                {
                    _DatumOrigins = base.CreateObjectSet<DatumOrigin>("DatumOrigins");
                }
                return _DatumOrigins;
            }
        }
        private ObjectSet<DatumOrigin> _DatumOrigins;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Metadata> MetadataSet
        {
            get
            {
                if ((_MetadataSet == null))
                {
                    _MetadataSet = base.CreateObjectSet<Metadata>("MetadataSet");
                }
                return _MetadataSet;
            }
        }
        private ObjectSet<Metadata> _MetadataSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Sector> Sectors
        {
            get
            {
                if ((_Sectors == null))
                {
                    _Sectors = base.CreateObjectSet<Sector>("Sectors");
                }
                return _Sectors;
            }
        }
        private ObjectSet<Sector> _Sectors;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Stock> Stocks
        {
            get
            {
                if ((_Stocks == null))
                {
                    _Stocks = base.CreateObjectSet<Stock>("Stocks");
                }
                return _Stocks;
            }
        }
        private ObjectSet<Stock> _Stocks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StockExchange> StockExchanges
        {
            get
            {
                if ((_StockExchanges == null))
                {
                    _StockExchanges = base.CreateObjectSet<StockExchange>("StockExchanges");
                }
                return _StockExchanges;
            }
        }
        private ObjectSet<StockExchange> _StockExchanges;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StockPrice> StockPrices
        {
            get
            {
                if ((_StockPrices == null))
                {
                    _StockPrices = base.CreateObjectSet<StockPrice>("StockPrices");
                }
                return _StockPrices;
            }
        }
        private ObjectSet<StockPrice> _StockPrices;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TradedStock> TradedStocks
        {
            get
            {
                if ((_TradedStocks == null))
                {
                    _TradedStocks = base.CreateObjectSet<TradedStock>("TradedStocks");
                }
                return _TradedStocks;
            }
        }
        private ObjectSet<TradedStock> _TradedStocks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Order> Orders
        {
            get
            {
                if ((_Orders == null))
                {
                    _Orders = base.CreateObjectSet<Order>("Orders");
                }
                return _Orders;
            }
        }
        private ObjectSet<Order> _Orders;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Portfolio> Portfolios
        {
            get
            {
                if ((_Portfolios == null))
                {
                    _Portfolios = base.CreateObjectSet<Portfolio>("Portfolios");
                }
                return _Portfolios;
            }
        }
        private ObjectSet<Portfolio> _Portfolios;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Position> Positions
        {
            get
            {
                if ((_Positions == null))
                {
                    _Positions = base.CreateObjectSet<Position>("Positions");
                }
                return _Positions;
            }
        }
        private ObjectSet<Position> _Positions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CountryAlias> CountryAliases
        {
            get
            {
                if ((_CountryAliases == null))
                {
                    _CountryAliases = base.CreateObjectSet<CountryAlias>("CountryAliases");
                }
                return _CountryAliases;
            }
        }
        private ObjectSet<CountryAlias> _CountryAliases;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SectorAlias> SectorAliases
        {
            get
            {
                if ((_SectorAliases == null))
                {
                    _SectorAliases = base.CreateObjectSet<SectorAlias>("SectorAliases");
                }
                return _SectorAliases;
            }
        }
        private ObjectSet<SectorAlias> _SectorAliases;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StockCatalogs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStockCatalogs(StockCatalog stockCatalog)
        {
            base.AddObject("StockCatalogs", stockCatalog);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Companies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCompanies(Company company)
        {
            base.AddObject("Companies", company);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Currencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCurrencies(Currency currency)
        {
            base.AddObject("Currencies", currency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DatumOrigins EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDatumOrigins(DatumOrigin datumOrigin)
        {
            base.AddObject("DatumOrigins", datumOrigin);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MetadataSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMetadataSet(Metadata metadata)
        {
            base.AddObject("MetadataSet", metadata);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Sectors EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSectors(Sector sector)
        {
            base.AddObject("Sectors", sector);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Stocks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStocks(Stock stock)
        {
            base.AddObject("Stocks", stock);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StockExchanges EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStockExchanges(StockExchange stockExchange)
        {
            base.AddObject("StockExchanges", stockExchange);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StockPrices EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStockPrices(StockPrice stockPrice)
        {
            base.AddObject("StockPrices", stockPrice);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TradedStocks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTradedStocks(TradedStock tradedStock)
        {
            base.AddObject("TradedStocks", tradedStock);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Orders EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOrders(Order order)
        {
            base.AddObject("Orders", order);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Portfolios EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPortfolios(Portfolio portfolio)
        {
            base.AddObject("Portfolios", portfolio);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Positions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPositions(Position position)
        {
            base.AddObject("Positions", position);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CountryAliases EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountryAliases(CountryAlias countryAlias)
        {
            base.AddObject("CountryAliases", countryAlias);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SectorAliases EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSectorAliases(SectorAlias sectorAlias)
        {
            base.AddObject("SectorAliases", sectorAlias);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Company")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Company : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Company object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Company CreateCompany(global::System.Int64 id, global::System.String name)
        {
            Company company = new Company();
            company.Id = id;
            company.Name = name;
            return company;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Symbol
        {
            get
            {
                return _Symbol;
            }
            set
            {
                OnSymbolChanging(value);
                ReportPropertyChanging("Symbol");
                _Symbol = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Symbol");
                OnSymbolChanged();
            }
        }
        private global::System.String _Symbol;
        partial void OnSymbolChanging(global::System.String value);
        partial void OnSymbolChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RawBusinessYear
        {
            get
            {
                return _RawBusinessYear;
            }
            protected set
            {
                OnRawBusinessYearChanging(value);
                ReportPropertyChanging("RawBusinessYear");
                _RawBusinessYear = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RawBusinessYear");
                OnRawBusinessYearChanged();
            }
        }
        private global::System.String _RawBusinessYear;
        partial void OnRawBusinessYearChanging(global::System.String value);
        partial void OnRawBusinessYearChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockCompany", "Stock")]
        public EntityCollection<Stock> Stocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Stock>("TomEntitiesModel.StockCompany", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Stock>("TomEntitiesModel.StockCompany", "Stock", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CompanyCountry", "Country")]
        public Country CountryOfOrigin
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TomEntitiesModel.CompanyCountry", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TomEntitiesModel.CompanyCountry", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryOfOriginReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TomEntitiesModel.CompanyCountry", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("TomEntitiesModel.CompanyCountry", "Country", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CompanySector", "Sector")]
        public EntityCollection<Sector> Sectors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Sector>("TomEntitiesModel.CompanySector", "Sector");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Sector>("TomEntitiesModel.CompanySector", "Sector", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="lCID">Initial value of the LCID property.</param>
        public static Country CreateCountry(global::System.Int64 id, global::System.Int64 lCID)
        {
            Country country = new Country();
            country.Id = id;
            country.LCID = lCID;
            return country;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LCID
        {
            get
            {
                return _LCID;
            }
            set
            {
                OnLCIDChanging(value);
                ReportPropertyChanging("LCID");
                _LCID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LCID");
                OnLCIDChanged();
            }
        }
        private global::System.Int64 _LCID;
        partial void OnLCIDChanging(global::System.Int64 value);
        partial void OnLCIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CompanyCountry", "Company")]
        public EntityCollection<Company> Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Company>("TomEntitiesModel.CompanyCountry", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Company>("TomEntitiesModel.CompanyCountry", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CountryCountryAlias", "CountryAlias")]
        public EntityCollection<CountryAlias> Aliases
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<CountryAlias>("TomEntitiesModel.CountryCountryAlias", "CountryAlias");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<CountryAlias>("TomEntitiesModel.CountryCountryAlias", "CountryAlias", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="CountryAlias")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CountryAlias : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CountryAlias object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static CountryAlias CreateCountryAlias(global::System.Int64 id, global::System.String name)
        {
            CountryAlias countryAlias = new CountryAlias();
            countryAlias.Id = id;
            countryAlias.Name = name;
            return countryAlias;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CountryCountryAlias", "Country")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TomEntitiesModel.CountryCountryAlias", "Country").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TomEntitiesModel.CountryCountryAlias", "Country").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("TomEntitiesModel.CountryCountryAlias", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("TomEntitiesModel.CountryCountryAlias", "Country", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Currency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Currency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Currency object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="symbol">Initial value of the Symbol property.</param>
        public static Currency CreateCurrency(global::System.Int64 id, global::System.String name, global::System.String symbol)
        {
            Currency currency = new Currency();
            currency.Id = id;
            currency.Name = name;
            currency.Symbol = symbol;
            return currency;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            private set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Symbol
        {
            get
            {
                return _Symbol;
            }
            private set
            {
                OnSymbolChanging(value);
                ReportPropertyChanging("Symbol");
                _Symbol = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Symbol");
                OnSymbolChanged();
            }
        }
        private global::System.String _Symbol;
        partial void OnSymbolChanging(global::System.String value);
        partial void OnSymbolChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockExchangeCurrency", "StockExchange")]
        public EntityCollection<StockExchange> StockExchanges
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StockExchange>("TomEntitiesModel.StockExchangeCurrency", "StockExchange");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StockExchange>("TomEntitiesModel.StockExchangeCurrency", "StockExchange", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="DatumOrigin")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DatumOrigin : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DatumOrigin object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static DatumOrigin CreateDatumOrigin(global::System.Int64 id, global::System.String name)
        {
            DatumOrigin datumOrigin = new DatumOrigin();
            datumOrigin.Id = id;
            datumOrigin.Name = name;
            return datumOrigin;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "DatumOriginStockPrice", "StockPrice")]
        public EntityCollection<StockPrice> StockPrices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StockPrice>("TomEntitiesModel.DatumOriginStockPrice", "StockPrice");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StockPrice>("TomEntitiesModel.DatumOriginStockPrice", "StockPrice", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Metadata")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Metadata : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Metadata object.
        /// </summary>
        /// <param name="key">Initial value of the Key property.</param>
        public static Metadata CreateMetadata(global::System.String key)
        {
            Metadata metadata = new Metadata();
            metadata.Key = key;
            return metadata;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Key
        {
            get
            {
                return _Key;
            }
            set
            {
                if (_Key != value)
                {
                    OnKeyChanging(value);
                    ReportPropertyChanging("Key");
                    _Key = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Key");
                    OnKeyChanged();
                }
            }
        }
        private global::System.String _Key;
        partial void OnKeyChanging(global::System.String value);
        partial void OnKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Order")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Order : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Order object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="cost">Initial value of the Cost property.</param>
        /// <param name="isBuy">Initial value of the IsBuy property.</param>
        /// <param name="isDiscardable">Initial value of the IsDiscardable property.</param>
        /// <param name="isMarged">Initial value of the IsMarged property.</param>
        /// <param name="price">Initial value of the Price property.</param>
        /// <param name="submissionDateInternal">Initial value of the SubmissionDateInternal property.</param>
        /// <param name="quantity">Initial value of the Quantity property.</param>
        public static Order CreateOrder(global::System.Int64 id, global::System.Double cost, global::System.Boolean isBuy, global::System.Boolean isDiscardable, global::System.Boolean isMarged, global::System.Double price, global::System.String submissionDateInternal, global::System.Int64 quantity)
        {
            Order order = new Order();
            order.Id = id;
            order.Cost = cost;
            order.IsBuy = isBuy;
            order.IsDiscardable = isDiscardable;
            order.IsMarged = isMarged;
            order.Price = price;
            order.SubmissionDateInternal = submissionDateInternal;
            order.Quantity = quantity;
            return order;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            private set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Cost
        {
            get
            {
                return _Cost;
            }
            set
            {
                OnCostChanging(value);
                ReportPropertyChanging("Cost");
                _Cost = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Cost");
                OnCostChanged();
            }
        }
        private global::System.Double _Cost;
        partial void OnCostChanging(global::System.Double value);
        partial void OnCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> IndicativeStop
        {
            get
            {
                return _IndicativeStop;
            }
            set
            {
                OnIndicativeStopChanging(value);
                ReportPropertyChanging("IndicativeStop");
                _IndicativeStop = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IndicativeStop");
                OnIndicativeStopChanged();
            }
        }
        private Nullable<global::System.Double> _IndicativeStop;
        partial void OnIndicativeStopChanging(Nullable<global::System.Double> value);
        partial void OnIndicativeStopChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsBuy
        {
            get
            {
                return _IsBuy;
            }
            set
            {
                OnIsBuyChanging(value);
                ReportPropertyChanging("IsBuy");
                _IsBuy = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsBuy");
                OnIsBuyChanged();
            }
        }
        private global::System.Boolean _IsBuy;
        partial void OnIsBuyChanging(global::System.Boolean value);
        partial void OnIsBuyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDiscardable
        {
            get
            {
                return _IsDiscardable;
            }
            set
            {
                OnIsDiscardableChanging(value);
                ReportPropertyChanging("IsDiscardable");
                _IsDiscardable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsDiscardable");
                OnIsDiscardableChanged();
            }
        }
        private global::System.Boolean _IsDiscardable;
        partial void OnIsDiscardableChanging(global::System.Boolean value);
        partial void OnIsDiscardableChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMarged
        {
            get
            {
                return _IsMarged;
            }
            set
            {
                OnIsMargedChanging(value);
                ReportPropertyChanging("IsMarged");
                _IsMarged = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsMarged");
                OnIsMargedChanged();
            }
        }
        private global::System.Boolean _IsMarged;
        partial void OnIsMargedChanging(global::System.Boolean value);
        partial void OnIsMargedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Price
        {
            get
            {
                return _Price;
            }
            set
            {
                OnPriceChanging(value);
                ReportPropertyChanging("Price");
                _Price = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Price");
                OnPriceChanged();
            }
        }
        private global::System.Double _Price;
        partial void OnPriceChanging(global::System.Double value);
        partial void OnPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SubmissionDateInternal
        {
            get
            {
                return _SubmissionDateInternal;
            }
            set
            {
                OnSubmissionDateInternalChanging(value);
                ReportPropertyChanging("SubmissionDateInternal");
                _SubmissionDateInternal = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SubmissionDateInternal");
                OnSubmissionDateInternalChanged();
            }
        }
        private global::System.String _SubmissionDateInternal;
        partial void OnSubmissionDateInternalChanging(global::System.String value);
        partial void OnSubmissionDateInternalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Quantity
        {
            get
            {
                return _Quantity;
            }
            set
            {
                OnQuantityChanging(value);
                ReportPropertyChanging("Quantity");
                _Quantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Quantity");
                OnQuantityChanged();
            }
        }
        private global::System.Int64 _Quantity;
        partial void OnQuantityChanging(global::System.Int64 value);
        partial void OnQuantityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Source
        {
            get
            {
                return _Source;
            }
            protected set
            {
                OnSourceChanging(value);
                ReportPropertyChanging("Source");
                _Source = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Source");
                OnSourceChanged();
            }
        }
        private global::System.String _Source;
        partial void OnSourceChanging(global::System.String value);
        partial void OnSourceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        protected global::System.Int16 TypeInternal
        {
            get
            {
                return _TypeInternal;
            }
            set
            {
                OnTypeInternalChanging(value);
                ReportPropertyChanging("TypeInternal");
                _TypeInternal = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TypeInternal");
                OnTypeInternalChanged();
            }
        }
        private global::System.Int16 _TypeInternal;
        partial void OnTypeInternalChanging(global::System.Int16 value);
        partial void OnTypeInternalChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "PendingOrders", "Positions")]
        public EntityCollection<Position> PendingInPosition
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Position>("TomEntitiesModel.PendingOrders", "Positions");
            }
            private set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Position>("TomEntitiesModel.PendingOrders", "Positions", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "OrderTradedStock", "TradedStock")]
        public TradedStock TradedStock
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.OrderTradedStock", "TradedStock").Value;
            }
            private set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.OrderTradedStock", "TradedStock").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TradedStock> TradedStockReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.OrderTradedStock", "TradedStock");
            }
            private set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TradedStock>("TomEntitiesModel.OrderTradedStock", "TradedStock", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "ExecutedOrder", "Position")]
        public EntityCollection<Position> ExecutedInPosition
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Position>("TomEntitiesModel.ExecutedOrder", "Position");
            }
            private set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Position>("TomEntitiesModel.ExecutedOrder", "Position", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Portfolio")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Portfolio : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Portfolio object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="cash">Initial value of the Cash property.</param>
        /// <param name="initialSum">Initial value of the InitialSum property.</param>
        public static Portfolio CreatePortfolio(global::System.Int64 id, global::System.Double cash, global::System.Double initialSum)
        {
            Portfolio portfolio = new Portfolio();
            portfolio.Id = id;
            portfolio.Cash = cash;
            portfolio.InitialSum = initialSum;
            return portfolio;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        protected global::System.String BrokerInternal
        {
            get
            {
                return _BrokerInternal;
            }
            set
            {
                OnBrokerInternalChanging(value);
                ReportPropertyChanging("BrokerInternal");
                _BrokerInternal = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BrokerInternal");
                OnBrokerInternalChanged();
            }
        }
        private global::System.String _BrokerInternal;
        partial void OnBrokerInternalChanging(global::System.String value);
        partial void OnBrokerInternalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Cash
        {
            get
            {
                return _Cash;
            }
            set
            {
                OnCashChanging(value);
                ReportPropertyChanging("Cash");
                _Cash = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Cash");
                OnCashChanged();
            }
        }
        private global::System.Double _Cash;
        partial void OnCashChanging(global::System.Double value);
        partial void OnCashChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double InitialSum
        {
            get
            {
                return _InitialSum;
            }
            set
            {
                OnInitialSumChanging(value);
                ReportPropertyChanging("InitialSum");
                _InitialSum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InitialSum");
                OnInitialSumChanged();
            }
        }
        private global::System.Double _InitialSum;
        partial void OnInitialSumChanging(global::System.Double value);
        partial void OnInitialSumChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Position")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Position : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Position object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="quantity">Initial value of the Quantity property.</param>
        /// <param name="openDateInternal">Initial value of the OpenDateInternal property.</param>
        /// <param name="openPrice">Initial value of the OpenPrice property.</param>
        /// <param name="isLong">Initial value of the IsLong property.</param>
        /// <param name="isMarged">Initial value of the IsMarged property.</param>
        /// <param name="intendedToClose">Initial value of the IntendedToClose property.</param>
        public static Position CreatePosition(global::System.Int64 id, global::System.Int64 quantity, global::System.String openDateInternal, global::System.Double openPrice, global::System.Boolean isLong, global::System.Boolean isMarged, global::System.Boolean intendedToClose)
        {
            Position position = new Position();
            position.Id = id;
            position.Quantity = quantity;
            position.OpenDateInternal = openDateInternal;
            position.OpenPrice = openPrice;
            position.IsLong = isLong;
            position.IsMarged = isMarged;
            position.IntendedToClose = intendedToClose;
            return position;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Quantity
        {
            get
            {
                return _Quantity;
            }
            set
            {
                OnQuantityChanging(value);
                ReportPropertyChanging("Quantity");
                _Quantity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Quantity");
                OnQuantityChanged();
            }
        }
        private global::System.Int64 _Quantity;
        partial void OnQuantityChanging(global::System.Int64 value);
        partial void OnQuantityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OpenDateInternal
        {
            get
            {
                return _OpenDateInternal;
            }
            set
            {
                OnOpenDateInternalChanging(value);
                ReportPropertyChanging("OpenDateInternal");
                _OpenDateInternal = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OpenDateInternal");
                OnOpenDateInternalChanged();
            }
        }
        private global::System.String _OpenDateInternal;
        partial void OnOpenDateInternalChanging(global::System.String value);
        partial void OnOpenDateInternalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double OpenPrice
        {
            get
            {
                return _OpenPrice;
            }
            set
            {
                OnOpenPriceChanging(value);
                ReportPropertyChanging("OpenPrice");
                _OpenPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OpenPrice");
                OnOpenPriceChanged();
            }
        }
        private global::System.Double _OpenPrice;
        partial void OnOpenPriceChanging(global::System.Double value);
        partial void OnOpenPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CloseDateInternal
        {
            get
            {
                return _CloseDateInternal;
            }
            set
            {
                OnCloseDateInternalChanging(value);
                ReportPropertyChanging("CloseDateInternal");
                _CloseDateInternal = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CloseDateInternal");
                OnCloseDateInternalChanged();
            }
        }
        private global::System.String _CloseDateInternal;
        partial void OnCloseDateInternalChanging(global::System.String value);
        partial void OnCloseDateInternalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> ClosePrice
        {
            get
            {
                return _ClosePrice;
            }
            set
            {
                OnClosePriceChanging(value);
                ReportPropertyChanging("ClosePrice");
                _ClosePrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClosePrice");
                OnClosePriceChanged();
            }
        }
        private Nullable<global::System.Double> _ClosePrice;
        partial void OnClosePriceChanging(Nullable<global::System.Double> value);
        partial void OnClosePriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsLong
        {
            get
            {
                return _IsLong;
            }
            set
            {
                OnIsLongChanging(value);
                ReportPropertyChanging("IsLong");
                _IsLong = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsLong");
                OnIsLongChanged();
            }
        }
        private global::System.Boolean _IsLong;
        partial void OnIsLongChanging(global::System.Boolean value);
        partial void OnIsLongChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMarged
        {
            get
            {
                return _IsMarged;
            }
            set
            {
                OnIsMargedChanging(value);
                ReportPropertyChanging("IsMarged");
                _IsMarged = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsMarged");
                OnIsMargedChanged();
            }
        }
        private global::System.Boolean _IsMarged;
        partial void OnIsMargedChanging(global::System.Boolean value);
        partial void OnIsMargedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> StopPrice
        {
            get
            {
                return _StopPrice;
            }
            set
            {
                OnStopPriceChanging(value);
                ReportPropertyChanging("StopPrice");
                _StopPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StopPrice");
                OnStopPriceChanged();
            }
        }
        private Nullable<global::System.Double> _StopPrice;
        partial void OnStopPriceChanging(Nullable<global::System.Double> value);
        partial void OnStopPriceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Source
        {
            get
            {
                return _Source;
            }
            set
            {
                OnSourceChanging(value);
                ReportPropertyChanging("Source");
                _Source = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Source");
                OnSourceChanged();
            }
        }
        private global::System.String _Source;
        partial void OnSourceChanging(global::System.String value);
        partial void OnSourceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IntendedToClose
        {
            get
            {
                return _IntendedToClose;
            }
            set
            {
                OnIntendedToCloseChanging(value);
                ReportPropertyChanging("IntendedToClose");
                _IntendedToClose = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IntendedToClose");
                OnIntendedToCloseChanged();
            }
        }
        private global::System.Boolean _IntendedToClose;
        partial void OnIntendedToCloseChanging(global::System.Boolean value);
        partial void OnIntendedToCloseChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "PendingOrders", "Orders")]
        public EntityCollection<Order> PendingOrders
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Order>("TomEntitiesModel.PendingOrders", "Orders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Order>("TomEntitiesModel.PendingOrders", "Orders", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "ExecutedOrder", "Order")]
        public EntityCollection<Order> ExecutedOrders
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Order>("TomEntitiesModel.ExecutedOrder", "Order");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Order>("TomEntitiesModel.ExecutedOrder", "Order", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "PositionTradedStock", "TradedStock")]
        public TradedStock TradedStock
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.PositionTradedStock", "TradedStock").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.PositionTradedStock", "TradedStock").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TradedStock> TradedStockReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.PositionTradedStock", "TradedStock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TradedStock>("TomEntitiesModel.PositionTradedStock", "TradedStock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Sector")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Sector : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Sector object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Sector CreateSector(global::System.Int64 id, global::System.String name)
        {
            Sector sector = new Sector();
            sector.Id = id;
            sector.Name = name;
            return sector;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CompanySector", "Company")]
        public EntityCollection<Company> Companies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Company>("TomEntitiesModel.CompanySector", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Company>("TomEntitiesModel.CompanySector", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "SectorSectorAlias", "SectorAlias")]
        public EntityCollection<SectorAlias> Aliases
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SectorAlias>("TomEntitiesModel.SectorSectorAlias", "SectorAlias");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SectorAlias>("TomEntitiesModel.SectorSectorAlias", "SectorAlias", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="SectorAlias")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SectorAlias : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SectorAlias object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static SectorAlias CreateSectorAlias(global::System.Int64 id, global::System.String name)
        {
            SectorAlias sectorAlias = new SectorAlias();
            sectorAlias.Id = id;
            sectorAlias.Name = name;
            return sectorAlias;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "SectorSectorAlias", "Sector")]
        public Sector Sector
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sector>("TomEntitiesModel.SectorSectorAlias", "Sector").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sector>("TomEntitiesModel.SectorSectorAlias", "Sector").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Sector> SectorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Sector>("TomEntitiesModel.SectorSectorAlias", "Sector");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Sector>("TomEntitiesModel.SectorSectorAlias", "Sector", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="Stock")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Stock : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Stock object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="isin">Initial value of the Isin property.</param>
        /// <param name="rawType">Initial value of the RawType property.</param>
        public static Stock CreateStock(global::System.Int64 id, global::System.String isin, global::System.Int64 rawType)
        {
            Stock stock = new Stock();
            stock.Id = id;
            stock.Isin = isin;
            stock.RawType = rawType;
            return stock;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Isin
        {
            get
            {
                return _Isin;
            }
            set
            {
                OnIsinChanging(value);
                ReportPropertyChanging("Isin");
                _Isin = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Isin");
                OnIsinChanged();
            }
        }
        private global::System.String _Isin;
        partial void OnIsinChanging(global::System.String value);
        partial void OnIsinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 RawType
        {
            get
            {
                return _RawType;
            }
            protected set
            {
                OnRawTypeChanging(value);
                ReportPropertyChanging("RawType");
                _RawType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RawType");
                OnRawTypeChanged();
            }
        }
        private global::System.Int64 _RawType;
        partial void OnRawTypeChanging(global::System.Int64 value);
        partial void OnRawTypeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockCompany", "Company")]
        public Company Company
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("TomEntitiesModel.StockCompany", "Company").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("TomEntitiesModel.StockCompany", "Company").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Company> CompanyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Company>("TomEntitiesModel.StockCompany", "Company");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Company>("TomEntitiesModel.StockCompany", "Company", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "TradedStockStock", "TradedStock")]
        public EntityCollection<TradedStock> TradedStocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TradedStock>("TomEntitiesModel.TradedStockStock", "TradedStock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TradedStock>("TomEntitiesModel.TradedStockStock", "TradedStock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="StockCatalog")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StockCatalog : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StockCatalog object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static StockCatalog CreateStockCatalog(global::System.Int64 id, global::System.String name)
        {
            StockCatalog stockCatalog = new StockCatalog();
            stockCatalog.Id = id;
            stockCatalog.Name = name;
            return stockCatalog;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CatalogTradedStock", "TradedStock")]
        public EntityCollection<TradedStock> TradedStocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TradedStock>("TomEntitiesModel.CatalogTradedStock", "TradedStock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TradedStock>("TomEntitiesModel.CatalogTradedStock", "TradedStock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="StockExchange")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StockExchange : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StockExchange object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="symbol">Initial value of the Symbol property.</param>
        public static StockExchange CreateStockExchange(global::System.Int64 id, global::System.String name, global::System.String symbol)
        {
            StockExchange stockExchange = new StockExchange();
            stockExchange.Id = id;
            stockExchange.Name = name;
            stockExchange.Symbol = symbol;
            return stockExchange;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Symbol
        {
            get
            {
                return _Symbol;
            }
            set
            {
                OnSymbolChanging(value);
                ReportPropertyChanging("Symbol");
                _Symbol = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Symbol");
                OnSymbolChanged();
            }
        }
        private global::System.String _Symbol;
        partial void OnSymbolChanging(global::System.String value);
        partial void OnSymbolChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockExchangeCurrency", "Currency")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("TomEntitiesModel.StockExchangeCurrency", "Currency").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("TomEntitiesModel.StockExchangeCurrency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("TomEntitiesModel.StockExchangeCurrency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("TomEntitiesModel.StockExchangeCurrency", "Currency", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockExchangeTradedStock", "TradedStock")]
        public EntityCollection<TradedStock> TradedStocks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TradedStock>("TomEntitiesModel.StockExchangeTradedStock", "TradedStock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TradedStock>("TomEntitiesModel.StockExchangeTradedStock", "TradedStock", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="StockPrice")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StockPrice : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StockPrice object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        /// <param name="close">Initial value of the Close property.</param>
        public static StockPrice CreateStockPrice(global::System.Int64 id, global::System.String timestamp, global::System.Double close)
        {
            StockPrice stockPrice = new StockPrice();
            stockPrice.Id = id;
            stockPrice.Timestamp = timestamp;
            stockPrice.Close = close;
            return stockPrice;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                OnTimestampChanging(value);
                ReportPropertyChanging("Timestamp");
                _Timestamp = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Timestamp");
                OnTimestampChanged();
            }
        }
        private global::System.String _Timestamp;
        partial void OnTimestampChanging(global::System.String value);
        partial void OnTimestampChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        protected global::System.String DateInternal
        {
            get
            {
                return _DateInternal;
            }
            set
            {
                OnDateInternalChanging(value);
                ReportPropertyChanging("DateInternal");
                _DateInternal = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DateInternal");
                OnDateInternalChanged();
            }
        }
        private global::System.String _DateInternal;
        partial void OnDateInternalChanging(global::System.String value);
        partial void OnDateInternalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Open
        {
            get
            {
                return _Open;
            }
            set
            {
                OnOpenChanging(value);
                ReportPropertyChanging("Open");
                _Open = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Open");
                OnOpenChanged();
            }
        }
        private Nullable<global::System.Double> _Open;
        partial void OnOpenChanging(Nullable<global::System.Double> value);
        partial void OnOpenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> High
        {
            get
            {
                return _High;
            }
            set
            {
                OnHighChanging(value);
                ReportPropertyChanging("High");
                _High = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("High");
                OnHighChanged();
            }
        }
        private Nullable<global::System.Double> _High;
        partial void OnHighChanging(Nullable<global::System.Double> value);
        partial void OnHighChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> Low
        {
            get
            {
                return _Low;
            }
            set
            {
                OnLowChanging(value);
                ReportPropertyChanging("Low");
                _Low = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Low");
                OnLowChanged();
            }
        }
        private Nullable<global::System.Double> _Low;
        partial void OnLowChanging(Nullable<global::System.Double> value);
        partial void OnLowChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Close
        {
            get
            {
                return _Close;
            }
            set
            {
                OnCloseChanging(value);
                ReportPropertyChanging("Close");
                _Close = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Close");
                OnCloseChanged();
            }
        }
        private global::System.Double _Close;
        partial void OnCloseChanging(global::System.Double value);
        partial void OnCloseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Volume
        {
            get
            {
                return _Volume;
            }
            set
            {
                OnVolumeChanging(value);
                ReportPropertyChanging("Volume");
                _Volume = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Volume");
                OnVolumeChanged();
            }
        }
        private Nullable<global::System.Int64> _Volume;
        partial void OnVolumeChanging(Nullable<global::System.Int64> value);
        partial void OnVolumeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockPriceTradedStock", "TradedStock")]
        public TradedStock TradedStock
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.StockPriceTradedStock", "TradedStock").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.StockPriceTradedStock", "TradedStock").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TradedStock> TradedStockReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TradedStock>("TomEntitiesModel.StockPriceTradedStock", "TradedStock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TradedStock>("TomEntitiesModel.StockPriceTradedStock", "TradedStock", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "DatumOriginStockPrice", "DatumOrigin")]
        public DatumOrigin DatumOrigin
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DatumOrigin>("TomEntitiesModel.DatumOriginStockPrice", "DatumOrigin").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DatumOrigin>("TomEntitiesModel.DatumOriginStockPrice", "DatumOrigin").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DatumOrigin> DatumOriginReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DatumOrigin>("TomEntitiesModel.DatumOriginStockPrice", "DatumOrigin");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DatumOrigin>("TomEntitiesModel.DatumOriginStockPrice", "DatumOrigin", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TomEntitiesModel", Name="TradedStock")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TradedStock : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TradedStock object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="symbol">Initial value of the Symbol property.</param>
        public static TradedStock CreateTradedStock(global::System.Int64 id, global::System.String symbol)
        {
            TradedStock tradedStock = new TradedStock();
            tradedStock.Id = id;
            tradedStock.Symbol = symbol;
            return tradedStock;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            private set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Wpkn
        {
            get
            {
                return _Wpkn;
            }
            set
            {
                OnWpknChanging(value);
                ReportPropertyChanging("Wpkn");
                _Wpkn = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Wpkn");
                OnWpknChanged();
            }
        }
        private global::System.String _Wpkn;
        partial void OnWpknChanging(global::System.String value);
        partial void OnWpknChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Symbol
        {
            get
            {
                return _Symbol;
            }
            set
            {
                OnSymbolChanging(value);
                ReportPropertyChanging("Symbol");
                _Symbol = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Symbol");
                OnSymbolChanged();
            }
        }
        private global::System.String _Symbol;
        partial void OnSymbolChanging(global::System.String value);
        partial void OnSymbolChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "TradedStockStock", "Stock")]
        public Stock Stock
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("TomEntitiesModel.TradedStockStock", "Stock").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("TomEntitiesModel.TradedStockStock", "Stock").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Stock> StockReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stock>("TomEntitiesModel.TradedStockStock", "Stock");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Stock>("TomEntitiesModel.TradedStockStock", "Stock", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockPriceTradedStock", "StockPrice")]
        public EntityCollection<StockPrice> StockPrices
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StockPrice>("TomEntitiesModel.StockPriceTradedStock", "StockPrice");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StockPrice>("TomEntitiesModel.StockPriceTradedStock", "StockPrice", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "StockExchangeTradedStock", "StockExchange")]
        public StockExchange StockExchange
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StockExchange>("TomEntitiesModel.StockExchangeTradedStock", "StockExchange").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StockExchange>("TomEntitiesModel.StockExchangeTradedStock", "StockExchange").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StockExchange> StockExchangeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StockExchange>("TomEntitiesModel.StockExchangeTradedStock", "StockExchange");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StockExchange>("TomEntitiesModel.StockExchangeTradedStock", "StockExchange", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "CatalogTradedStock", "Catalog")]
        public EntityCollection<StockCatalog> Catalogs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<StockCatalog>("TomEntitiesModel.CatalogTradedStock", "Catalog");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<StockCatalog>("TomEntitiesModel.CatalogTradedStock", "Catalog", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "OrderTradedStock", "Order")]
        public EntityCollection<Order> Orders
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Order>("TomEntitiesModel.OrderTradedStock", "Order");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Order>("TomEntitiesModel.OrderTradedStock", "Order", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TomEntitiesModel", "PositionTradedStock", "Position")]
        public EntityCollection<Position> Positions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Position>("TomEntitiesModel.PositionTradedStock", "Position");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Position>("TomEntitiesModel.PositionTradedStock", "Position", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
